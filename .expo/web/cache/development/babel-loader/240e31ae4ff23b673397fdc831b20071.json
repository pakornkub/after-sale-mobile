{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useCallback } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useNetInfo } from \"@react-native-community/netinfo\";\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\nimport AppScanner from \"../../components/AppScanner\";\nimport { getCurrentTimeStamp } from \"../../utils/date\";\nimport { getTimeFromToken } from \"../../utils/token\";\nimport { expireTime } from \"../../configs/token\";\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\nimport Logo from \"../../components/Logo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Login = React.lazy(function () {\n  return import(\"../Login\");\n});\nvar Menu = React.lazy(function () {\n  return import(\"../Menu\");\n});\nvar Error404 = React.lazy(function () {\n  return import(\"../Error404\");\n});\n\nvar Main = function Main() {\n  var _authResult$data, _authResult$data$perm;\n\n  var Stack = createStackNavigator();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(selectAuth),\n      authResult = _useSelector.authResult;\n\n  var NetInfo = useNetInfo();\n  var validateToken = useCallback(function _callee() {\n    var auth, accessTime, currentTime;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.t0 = JSON;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"auth\"));\n\n          case 4:\n            _context.t1 = _context.sent;\n\n            if (_context.t1) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.t1 = \"{}\";\n\n          case 7:\n            _context.t2 = _context.t1;\n            auth = _context.t0.parse.call(_context.t0, _context.t2);\n\n            if (auth.status) {\n              accessTime = getTimeFromToken(auth.data.token);\n              currentTime = getCurrentTimeStamp();\n\n              if (currentTime - accessTime > expireTime) {\n                Alert.alert(\"Alert\", \"Your token is expired, please login again\", [{\n                  text: \"OK\",\n                  onPress: function onPress() {\n                    dispatch(setAuth({}));\n                  }\n                }]);\n              }\n\n              dispatch(setAuth(auth));\n            } else {\n              dispatch(setAuth({}));\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t3 = _context[\"catch\"](0);\n            console.log(_context.t3);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  }, [authResult]);\n  var handleLogout = useCallback(function () {\n    Alert.alert(\"CONFIRM LOGOUT\", authResult == null ? void 0 : authResult.data.UserName, [{\n      text: \"CANCEL\",\n      style: \"cancel\"\n    }, {\n      text: \"CONFIRM\",\n      style: \"default\",\n      onPress: function onPress() {\n        dispatch(setAuth({}));\n      }\n    }]);\n  }, [authResult]);\n  useEffect(function () {\n    validateToken();\n  }, []);\n  return _jsx(_Fragment, {\n    children: _jsx(Stack.Navigator, {\n      children: authResult != null && authResult.status ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Menu\",\n          component: Menu,\n          options: function options() {\n            return {\n              headerStyle: {\n                backgroundColor: \"#14439c\"\n              },\n              headerTitle: function headerTitle() {\n                return _jsx(Logo, {});\n              },\n              headerRight: function headerRight() {\n                return _jsx(HStack, {\n                  space: 2,\n                  pr: \"2\",\n                  children: _jsx(Pressable, {\n                    onPress: function onPress() {\n                      return handleLogout();\n                    },\n                    children: function children(_ref) {\n                      var isHovered = _ref.isHovered,\n                          isPressed = _ref.isPressed;\n                      return _jsxs(Avatar, {\n                        bg: \"blue.700\",\n                        size: \"sm\",\n                        mt: 1,\n                        w: Platform.OS === \"ios\" ? 10 : 100,\n                        color: isPressed ? \"blue.900\" : isHovered ? \"blue.900\" : \"blue.700\",\n                        style: {\n                          transform: [{\n                            scale: isPressed ? 0.96 : 1\n                          }]\n                        },\n                        children: [Platform.OS === \"ios\" ? authResult.data.UserName.charAt(0).toUpperCase() : _jsx(Text, {\n                          mb: 1,\n                          bold: true,\n                          isTruncated: true,\n                          color: \"warmGray.50\",\n                          children: authResult.data.UserName\n                        }), _jsx(Avatar.Badge, {\n                          bg: NetInfo.isConnected ? \"green.500\" : \"red.500\"\n                        })]\n                      });\n                    }\n                  })\n                });\n              }\n            };\n          }\n        }), authResult == null ? void 0 : (_authResult$data = authResult.data) == null ? void 0 : (_authResult$data$perm = _authResult$data.permission) == null ? void 0 : _authResult$data$perm.map(function (value, index) {\n          return _jsx(Stack.Screen, {\n            name: value.MenuId,\n            options: function options() {\n              return {\n                title: \"\" + value.MenuName.toUpperCase(),\n                headerStyle: {\n                  backgroundColor: \"#14439c\"\n                },\n                headerTitleStyle: {\n                  color: \"#FFFEFE\",\n                  fontWeight: \"bold\"\n                },\n                headerTintColor: \"#FFFEFE\"\n              };\n            },\n            component: DynamicMenu[value.MenuId] ? DynamicMenu[value.MenuId] : Error404\n          }, index);\n        }), _jsx(Stack.Screen, {\n          name: \"AppScanner\",\n          component: AppScanner\n        })]\n      }) : _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: Login,\n        options: function options() {\n          return {\n            headerShown: false\n          };\n        }\n      })\n    })\n  });\n};\n\nexport default Main;","map":{"version":3,"names":["React","useEffect","useCallback","useDispatch","useSelector","Avatar","HStack","Pressable","Text","createStackNavigator","AsyncStorage","useNetInfo","setAuth","selectAuth","AppScanner","getCurrentTimeStamp","getTimeFromToken","expireTime","DynamicMenu","Logo","Login","lazy","Menu","Error404","Main","Stack","dispatch","authResult","NetInfo","validateToken","JSON","getItem","auth","parse","status","accessTime","data","token","currentTime","Alert","alert","text","onPress","console","log","handleLogout","UserName","style","headerStyle","backgroundColor","headerTitle","headerRight","isHovered","isPressed","Platform","OS","transform","scale","charAt","toUpperCase","isConnected","permission","map","value","index","MenuId","title","MenuName","headerTitleStyle","color","fontWeight","headerTintColor","headerShown"],"sources":["D:/Dev/after-sale-mobile/src/views/Main/Main.tsx"],"sourcesContent":["import React, { useEffect, useCallback } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Avatar, HStack, Pressable, Text } from \"native-base\";\r\nimport { Alert } from \"react-native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useNetInfo } from \"@react-native-community/netinfo\";\r\n\r\nimport { setAuth, selectAuth } from \"../../contexts/slices/authSlice\";\r\n\r\nimport AppScanner from \"../../components/AppScanner\";\r\nimport { getCurrentTimeStamp } from \"../../utils/date\";\r\nimport { getTimeFromToken } from \"../../utils/token\";\r\nimport { expireTime } from \"../../configs/token\";\r\n\r\nimport { DynamicMenu } from \"../../components/DynamicMenu\";\r\nimport Logo from \"../../components/Logo\";\r\n\r\nconst Login = React.lazy(() => import(\"../Login\"));\r\nconst Menu = React.lazy(() => import(\"../Menu\"));\r\nconst Error404 = React.lazy(() => import(\"../Error404\"));\r\n\r\nconst Main: React.FC = () => {\r\n  const Stack: any = createStackNavigator();\r\n  const dispatch = useDispatch();\r\n  const { authResult } = useSelector(selectAuth);\r\n\r\n  const NetInfo = useNetInfo();\r\n\r\n  const validateToken = useCallback(async () => {\r\n    try {\r\n      //? get token, status from AsyncStorage\r\n      const auth: any = JSON.parse(\r\n        (await AsyncStorage.getItem(\"auth\")) || \"{}\"\r\n      );\r\n\r\n      if (auth.status) {\r\n        const accessTime = getTimeFromToken(auth.data.token);\r\n        const currentTime = getCurrentTimeStamp();\r\n\r\n        //? if token is expired\r\n        if (currentTime - accessTime > expireTime) {\r\n          Alert.alert(\"Alert\", \"Your token is expired, please login again\", [\r\n            {\r\n              text: \"OK\",\r\n              onPress: () => {\r\n                dispatch(setAuth({}));\r\n              },\r\n            },\r\n          ]);\r\n        }\r\n\r\n        //? if token is valid\r\n        dispatch(setAuth(auth));\r\n      } else {\r\n        dispatch(setAuth({}));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [authResult]);\r\n\r\n  const handleLogout = useCallback(() => {\r\n    Alert.alert(\"CONFIRM LOGOUT\", authResult?.data.UserName, [\r\n      {\r\n        text: \"CANCEL\",\r\n        style: \"cancel\",\r\n      },\r\n      {\r\n        text: \"CONFIRM\",\r\n        style: \"default\",\r\n        onPress: () => {\r\n          dispatch(setAuth({}));\r\n        },\r\n      },\r\n    ]);\r\n  }, [authResult]);\r\n\r\n  useEffect(() => {\r\n    validateToken();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Stack.Navigator>\r\n        {authResult?.status ? (\r\n          <>\r\n            <Stack.Screen\r\n              name=\"Menu\"\r\n              component={Menu}\r\n              options={() => ({\r\n                headerStyle: {\r\n                  backgroundColor: /* \"#2471A3\" */ \"#14439c\",\r\n                },\r\n                headerTitle: () => <Logo />,\r\n                headerRight: () => (\r\n                  <HStack space={2} pr=\"2\">\r\n                    <Pressable onPress={() => handleLogout()}>\r\n                      {({ isHovered, isPressed }) => {\r\n                        return (\r\n                          <Avatar\r\n                            bg=\"blue.700\"\r\n                            size=\"sm\"\r\n                            mt={1}\r\n                            w={Platform.OS === \"ios\" ? 10 : 100}\r\n                            color={\r\n                              isPressed\r\n                                ? \"blue.900\"\r\n                                : isHovered\r\n                                ? \"blue.900\"\r\n                                : \"blue.700\"\r\n                            }\r\n                            style={{\r\n                              transform: [\r\n                                {\r\n                                  scale: isPressed ? 0.96 : 1,\r\n                                },\r\n                              ],\r\n                            }}\r\n                          >\r\n                            {Platform.OS === \"ios\" ? (\r\n                              authResult.data.UserName.charAt(0).toUpperCase()\r\n                            ) : (\r\n                              <Text mb={1} bold isTruncated color=\"warmGray.50\">\r\n                                {authResult.data.UserName}\r\n                              </Text>\r\n                            )}\r\n                            <Avatar.Badge\r\n                              bg={NetInfo.isConnected ? \"green.500\" : \"red.500\"}\r\n                            />\r\n                          </Avatar>\r\n                        );\r\n                      }}\r\n                    </Pressable>\r\n                  </HStack>\r\n                ),\r\n              })}\r\n            />\r\n\r\n            {authResult?.data?.permission?.map((value: any, index: number) => {\r\n              return (\r\n                <Stack.Screen\r\n                  key={index}\r\n                  name={value.MenuId}\r\n                  options={() => ({\r\n                    title: `${value.MenuName.toUpperCase()}`,\r\n                    headerStyle: {\r\n                      backgroundColor: /* \"#2471A3\" */ \"#14439c\",\r\n                    },\r\n                    headerTitleStyle: {\r\n                      color: \"#FFFEFE\",\r\n                      fontWeight : \"bold\"\r\n                    },\r\n                    headerTintColor: \"#FFFEFE\",\r\n                  })}\r\n                  component={\r\n                    DynamicMenu[value.MenuId]\r\n                      ? DynamicMenu[value.MenuId]\r\n                      : Error404\r\n                  }\r\n                />\r\n              );\r\n            })}\r\n\r\n            <Stack.Screen name=\"AppScanner\" component={AppScanner} />\r\n          </>\r\n        ) : (\r\n          <Stack.Screen\r\n            name=\"Login\"\r\n            component={Login}\r\n            options={() => ({\r\n              headerShown: false,\r\n            })}\r\n          />\r\n        )}\r\n      </Stack.Navigator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}