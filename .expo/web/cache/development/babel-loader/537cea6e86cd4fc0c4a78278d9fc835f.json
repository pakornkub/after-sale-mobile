{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Center, Button, AlertDialog, Text, Input, HStack } from \"native-base\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar AppAlertDialog = function AppAlertDialog(_ref) {\n  var isOpenAlertDialog = _ref.isOpenAlertDialog,\n      setIsOpenAlertDialog = _ref.setIsOpenAlertDialog,\n      handleSubmit = _ref.handleSubmit;\n\n  var onClose = function onClose() {\n    return setIsOpenAlertDialog(false);\n  };\n\n  var cancelRef = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      random = _useState2[0],\n      setRandom = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      disabled = _useState4[0],\n      setDisabled = _useState4[1];\n\n  var handleInputAlertDialog = function handleInputAlertDialog(value) {\n    if (random === value) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  };\n\n  var handleSubmitAlertDialog = function handleSubmitAlertDialog() {\n    handleSubmit();\n    onClose();\n  };\n\n  useEffect(function () {\n    setRandom((Math.random() + 1).toString(36).substring(6));\n  }, [isOpenAlertDialog]);\n  return _jsx(_Fragment, {\n    children: _jsx(Center, {\n      children: _jsx(AlertDialog, {\n        leastDestructiveRef: cancelRef,\n        isOpen: isOpenAlertDialog,\n        onClose: onClose,\n        children: _jsxs(AlertDialog.Content, {\n          children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n            children: \"CONFIRM ORDER\"\n          }), _jsxs(AlertDialog.Body, {\n            children: [_jsx(Text, {\n              children: \"The box in this order not complete.\"\n            }), _jsx(Text, {\n              children: \"Please input text for confirmation.\"\n            }), _jsxs(HStack, {\n              flex: 1,\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              space: 5,\n              mt: 5,\n              children: [_jsx(Text, {\n                bold: true,\n                children: random\n              }), _jsx(Input, {\n                placeholder: \"INPUT CONFIRM\",\n                w: \"50%\",\n                onChangeText: function onChangeText(text) {\n                  return handleInputAlertDialog(text);\n                }\n              })]\n            })]\n          }), _jsx(AlertDialog.Footer, {\n            children: _jsxs(Button.Group, {\n              space: 2,\n              children: [_jsx(Button, {\n                variant: \"unstyled\",\n                colorScheme: \"coolGray\",\n                onPress: onClose,\n                ref: cancelRef,\n                children: \"CANCEL\"\n              }), _jsx(Button, {\n                isDisabled: disabled,\n                colorScheme: \"warning\",\n                onPress: handleSubmitAlertDialog,\n                children: \"CONFIRM\"\n              })]\n            })\n          })]\n        })\n      })\n    })\n  });\n};\n\nexport default AppAlertDialog;","map":{"version":3,"names":["React","useState","useRef","useEffect","Center","Button","AlertDialog","Text","Input","HStack","AppAlertDialog","isOpenAlertDialog","setIsOpenAlertDialog","handleSubmit","onClose","cancelRef","random","setRandom","disabled","setDisabled","handleInputAlertDialog","value","handleSubmitAlertDialog","Math","toString","substring","text"],"sources":["D:/Dev/after-sale-mobile/src/components/AppAlertDialog.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Center, Button, AlertDialog, Text, Input, HStack } from \"native-base\";\r\n\r\nconst AppAlertDialog: React.FC<any> = ({\r\n  isOpenAlertDialog,\r\n  setIsOpenAlertDialog,\r\n  handleSubmit,\r\n}) => {\r\n  const onClose = () => setIsOpenAlertDialog(false);\r\n\r\n  const cancelRef = useRef(null);\r\n\r\n  const [random, setRandom] = useState<any>(null);\r\n  const [disabled, setDisabled] = useState<boolean>(true);\r\n\r\n  const handleInputAlertDialog = (value: string) => {\r\n    if (random === value) {\r\n      setDisabled(false);\r\n    } else {\r\n      setDisabled(true);\r\n    }\r\n  };\r\n\r\n  const handleSubmitAlertDialog = () => {\r\n    handleSubmit();\r\n    onClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRandom((Math.random() + 1).toString(36).substring(6));\r\n  }, [isOpenAlertDialog]);\r\n\r\n  return (\r\n    <>\r\n      <Center>\r\n        <AlertDialog\r\n          leastDestructiveRef={cancelRef}\r\n          isOpen={isOpenAlertDialog}\r\n          onClose={onClose}\r\n        >\r\n          <AlertDialog.Content>\r\n            <AlertDialog.CloseButton />\r\n            <AlertDialog.Header>CONFIRM ORDER</AlertDialog.Header>\r\n            <AlertDialog.Body>\r\n              <Text>The box in this order not complete.</Text>\r\n              <Text>Please input text for confirmation.</Text>\r\n              <HStack\r\n                flex={1}\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                space={5}\r\n                mt={5}\r\n              >\r\n                <Text bold>{random}</Text>\r\n                <Input\r\n                  placeholder=\"INPUT CONFIRM\"\r\n                  w=\"50%\"\r\n                  onChangeText={(text) => handleInputAlertDialog(text)}\r\n                />\r\n              </HStack>\r\n            </AlertDialog.Body>\r\n            <AlertDialog.Footer>\r\n              <Button.Group space={2}>\r\n                <Button\r\n                  variant=\"unstyled\"\r\n                  colorScheme=\"coolGray\"\r\n                  onPress={onClose}\r\n                  ref={cancelRef}\r\n                >\r\n                  CANCEL\r\n                </Button>\r\n                <Button\r\n                  isDisabled={disabled}\r\n                  colorScheme=\"warning\"\r\n                  onPress={handleSubmitAlertDialog}\r\n                >\r\n                  CONFIRM\r\n                </Button>\r\n              </Button.Group>\r\n            </AlertDialog.Footer>\r\n          </AlertDialog.Content>\r\n        </AlertDialog>\r\n      </Center>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppAlertDialog;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,WAAzB,EAAsCC,IAAtC,EAA4CC,KAA5C,EAAmDC,MAAnD,QAAiE,aAAjE;;;;;AAEA,IAAMC,cAA6B,GAAG,SAAhCA,cAAgC,OAIhC;EAAA,IAHJC,iBAGI,QAHJA,iBAGI;EAAA,IAFJC,oBAEI,QAFJA,oBAEI;EAAA,IADJC,YACI,QADJA,YACI;;EACJ,IAAMC,OAAO,GAAG,SAAVA,OAAU;IAAA,OAAMF,oBAAoB,CAAC,KAAD,CAA1B;EAAA,CAAhB;;EAEA,IAAMG,SAAS,GAAGb,MAAM,CAAC,IAAD,CAAxB;;EAEA,gBAA4BD,QAAQ,CAAM,IAAN,CAApC;EAAA;EAAA,IAAOe,MAAP;EAAA,IAAeC,SAAf;;EACA,iBAAgChB,QAAQ,CAAU,IAAV,CAAxC;EAAA;EAAA,IAAOiB,QAAP;EAAA,IAAiBC,WAAjB;;EAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAmB;IAChD,IAAIL,MAAM,KAAKK,KAAf,EAAsB;MACpBF,WAAW,CAAC,KAAD,CAAX;IACD,CAFD,MAEO;MACLA,WAAW,CAAC,IAAD,CAAX;IACD;EACF,CAND;;EAQA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;IACpCT,YAAY;IACZC,OAAO;EACR,CAHD;;EAKAX,SAAS,CAAC,YAAM;IACdc,SAAS,CAAC,CAACM,IAAI,CAACP,MAAL,KAAgB,CAAjB,EAAoBQ,QAApB,CAA6B,EAA7B,EAAiCC,SAAjC,CAA2C,CAA3C,CAAD,CAAT;EACD,CAFQ,EAEN,CAACd,iBAAD,CAFM,CAAT;EAIA,OACE;IAAA,UACE,KAAC,MAAD;MAAA,UACE,KAAC,WAAD;QACE,mBAAmB,EAAEI,SADvB;QAEE,MAAM,EAAEJ,iBAFV;QAGE,OAAO,EAAEG,OAHX;QAAA,UAKE,MAAC,WAAD,CAAa,OAAb;UAAA,WACE,KAAC,WAAD,CAAa,WAAb,KADF,EAEE,KAAC,WAAD,CAAa,MAAb;YAAA;UAAA,EAFF,EAGE,MAAC,WAAD,CAAa,IAAb;YAAA,WACE,KAAC,IAAD;cAAA;YAAA,EADF,EAEE,KAAC,IAAD;cAAA;YAAA,EAFF,EAGE,MAAC,MAAD;cACE,IAAI,EAAE,CADR;cAEE,UAAU,EAAC,QAFb;cAGE,cAAc,EAAC,QAHjB;cAIE,KAAK,EAAE,CAJT;cAKE,EAAE,EAAE,CALN;cAAA,WAOE,KAAC,IAAD;gBAAM,IAAI,MAAV;gBAAA,UAAYE;cAAZ,EAPF,EAQE,KAAC,KAAD;gBACE,WAAW,EAAC,eADd;gBAEE,CAAC,EAAC,KAFJ;gBAGE,YAAY,EAAE,sBAACU,IAAD;kBAAA,OAAUN,sBAAsB,CAACM,IAAD,CAAhC;gBAAA;cAHhB,EARF;YAAA,EAHF;UAAA,EAHF,EAqBE,KAAC,WAAD,CAAa,MAAb;YAAA,UACE,MAAC,MAAD,CAAQ,KAAR;cAAc,KAAK,EAAE,CAArB;cAAA,WACE,KAAC,MAAD;gBACE,OAAO,EAAC,UADV;gBAEE,WAAW,EAAC,UAFd;gBAGE,OAAO,EAAEZ,OAHX;gBAIE,GAAG,EAAEC,SAJP;gBAAA;cAAA,EADF,EASE,KAAC,MAAD;gBACE,UAAU,EAAEG,QADd;gBAEE,WAAW,EAAC,SAFd;gBAGE,OAAO,EAAEI,uBAHX;gBAAA;cAAA,EATF;YAAA;UADF,EArBF;QAAA;MALF;IADF;EADF,EADF;AAqDD,CAlFD;;AAoFA,eAAeZ,cAAf"},"metadata":{},"sourceType":"module"}