{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\nimport { httpClient } from \"../services/axios\";\nexport var useCountStock = function useCountStock() {\n  var getCountStock = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get('/count_stock'));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useQuery(\"CountStock\", function () {\n    return getCountStock();\n  }, {\n    enabled: true,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true\n  });\n};\nexport var useCountStockItem = function useCountStockItem(_ref) {\n  var CountStock_ID = _ref.CountStock_ID;\n\n  var getCountStockItem = function _callee2(CountStock_ID) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get(\"/count_stock_item?CountStock_ID=\" + CountStock_ID));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useQuery([\"CountStockItem\", CountStock_ID], function () {\n    return getCountStockItem(CountStock_ID);\n  }, {\n    enabled: true\n  });\n};\nexport var useExecCountStockItem = function useExecCountStockItem() {\n  var queryClient = useQueryClient();\n\n  var execCountStockItem = function _callee3(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/exec_count_stock_item\", data));\n\n          case 4:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useMutation(\"ExecCountStockItem\", function (params) {\n    return execCountStockItem(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('CountStockItem');\n    },\n    onError: function onError(error) {\n      var _error$response, _error$response$data;\n\n      console.log((error == null ? void 0 : (_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || error.message);\n    }\n  });\n};\nexport var useUpdateCountStock = function useUpdateCountStock() {\n  var queryClient = useQueryClient();\n\n  var updateCountStock = function _callee4(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/update_count_stock\", data));\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useMutation(\"UpdateCountStock\", function (params) {\n    return updateCountStock(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('CountStock');\n    },\n    onError: function onError(error) {\n      var _error$response2, _error$response2$data;\n\n      console.log((error == null ? void 0 : (_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || error.message);\n    }\n  });\n};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","httpClient","useCountStock","getCountStock","get","enabled","refetchOnWindowFocus","refetchOnMount","useCountStockItem","CountStock_ID","getCountStockItem","useExecCountStockItem","queryClient","execCountStockItem","params","data","FormData","Object","keys","forEach","value","append","post","onSuccess","response","invalidateQueries","onError","error","console","log","message","useUpdateCountStock","updateCountStock"],"sources":["D:/Dev/after-sale-mobile/src/hooks/useCountStock.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"react-query\";\r\nimport { httpClient } from \"../services/axios\";\r\n\r\nexport const useCountStock = () => {\r\n  const getCountStock = async () => {\r\n    return await httpClient.get('/count_stock');\r\n  };\r\n  return useQuery(\r\n    \"CountStock\",\r\n    () => getCountStock(),\r\n    {\r\n      enabled: true,\r\n      refetchOnWindowFocus: true,\r\n      refetchOnMount: true,\r\n      //staleTime: 30000, // not to refresh the data from API is 30 seconds\r\n    }\r\n  );\r\n};\r\n\r\nexport const useCountStockItem = ({CountStock_ID}: any) => {\r\n\r\n  const getCountStockItem = async (CountStock_ID: any) => {\r\n    \r\n    return await httpClient.get(`/count_stock_item?CountStock_ID=${CountStock_ID}`);\r\n  };\r\n  return useQuery<any, any, any>(\r\n    [\"CountStockItem\", CountStock_ID],\r\n    () => getCountStockItem(CountStock_ID),\r\n    {\r\n      enabled: true,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useExecCountStockItem = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const execCountStockItem = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/exec_count_stock_item\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"ExecCountStockItem\",\r\n    (params) => execCountStockItem(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('CountStockItem');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const useUpdateCountStock = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const updateCountStock = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/update_count_stock\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"UpdateCountStock\",\r\n    (params) => updateCountStock(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('CountStock');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}