{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useQuery, useMutation, useQueryClient } from \"react-query\";\nimport { httpClient } from \"../services/axios\";\nexport var useJobRecheck = function useJobRecheck() {\n  var getJobRecheck = function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get('/job_recheck'));\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useQuery(\"JobRecheck\", function () {\n    return getJobRecheck();\n  }, {\n    enabled: true,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true\n  });\n};\nexport var useJobRecheckBOM = function useJobRecheckBOM(_ref) {\n  var JOB_ID = _ref.JOB_ID;\n\n  var getJobRecheckBOM = function _callee2(JOB_ID) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(httpClient.get(\"/job_recheck_bom?JOB_ID=\" + JOB_ID));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useQuery([\"JobRecheckBOM\", JOB_ID], function () {\n    return getJobRecheckBOM(JOB_ID);\n  }, {\n    enabled: true\n  });\n};\nexport var useExecJobRecheckItem = function useExecJobRecheckItem() {\n  var queryClient = useQueryClient();\n\n  var execJobRecheckItem = function _callee3(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/exec_job_recheck_item\", data));\n\n          case 4:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useMutation(\"ExecJobRecheckItem\", function (params) {\n    return execJobRecheckItem(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('JobRecheckBOM');\n    },\n    onError: function onError(error) {\n      var _error$response, _error$response$data;\n\n      console.log((error == null ? void 0 : (_error$response = error.response) == null ? void 0 : (_error$response$data = _error$response.data) == null ? void 0 : _error$response$data.message) || error.message);\n    }\n  });\n};\nexport var useExecJobRecheckTransactions = function useExecJobRecheckTransactions() {\n  var queryClient = useQueryClient();\n\n  var execJobRecheckTransactions = function _callee4(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/exec_job_recheck_transaction\", data));\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useMutation(\"ExecJobRecheckTransactions\", function (params) {\n    return execJobRecheckTransactions(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('JobRecheck');\n    },\n    onError: function onError(error) {\n      var _error$response2, _error$response2$data;\n\n      console.log((error == null ? void 0 : (_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || error.message);\n    }\n  });\n};\nexport var useUpdateJobRecheck = function useUpdateJobRecheck() {\n  var queryClient = useQueryClient();\n\n  var updateJobRecheck = function _callee5(params) {\n    var data;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            data = new FormData();\n            Object.keys(params).forEach(function (value) {\n              data.append(value, params[value] || \"\");\n            });\n            _context5.next = 4;\n            return _regeneratorRuntime.awrap(httpClient.post(\"/update_job_recheck\", data));\n\n          case 4:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return useMutation(\"UpdateJobRecheck\", function (params) {\n    return updateJobRecheck(params);\n  }, {\n    onSuccess: function onSuccess(response) {\n      queryClient.invalidateQueries('JobRecheck');\n    },\n    onError: function onError(error) {\n      var _error$response3, _error$response3$data;\n\n      console.log((error == null ? void 0 : (_error$response3 = error.response) == null ? void 0 : (_error$response3$data = _error$response3.data) == null ? void 0 : _error$response3$data.message) || error.message);\n    }\n  });\n};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","httpClient","useJobRecheck","getJobRecheck","get","enabled","refetchOnWindowFocus","refetchOnMount","useJobRecheckBOM","JOB_ID","getJobRecheckBOM","useExecJobRecheckItem","queryClient","execJobRecheckItem","params","data","FormData","Object","keys","forEach","value","append","post","onSuccess","response","invalidateQueries","onError","error","console","log","message","useExecJobRecheckTransactions","execJobRecheckTransactions","useUpdateJobRecheck","updateJobRecheck"],"sources":["D:/Dev/after-sale-mobile/src/hooks/useJobRecheck.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient } from \"react-query\";\r\nimport { httpClient } from \"../services/axios\";\r\n\r\nexport const useJobRecheck = () => {\r\n  const getJobRecheck = async () => {\r\n    return await httpClient.get('/job_recheck');\r\n  };\r\n  return useQuery(\r\n    \"JobRecheck\",\r\n    () => getJobRecheck(),\r\n    {\r\n      enabled: true,\r\n      refetchOnWindowFocus: true,\r\n      refetchOnMount: true,\r\n      //staleTime: 30000, // not to refresh the data from API is 30 seconds\r\n    }\r\n  );\r\n};\r\n\r\nexport const useJobRecheckBOM = ({JOB_ID}: any) => {\r\n\r\n  const getJobRecheckBOM = async (JOB_ID: any) => {\r\n    \r\n    return await httpClient.get(`/job_recheck_bom?JOB_ID=${JOB_ID}`);\r\n  };\r\n  return useQuery<any, any, any>(\r\n    [\"JobRecheckBOM\", JOB_ID],\r\n    () => getJobRecheckBOM(JOB_ID),\r\n    {\r\n      enabled: true,\r\n    }\r\n  );\r\n};\r\n\r\nexport const useExecJobRecheckItem = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const execJobRecheckItem = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/exec_job_recheck_item\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"ExecJobRecheckItem\",\r\n    (params) => execJobRecheckItem(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('JobRecheckBOM');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const useExecJobRecheckTransactions = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const execJobRecheckTransactions = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/exec_job_recheck_transaction\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"ExecJobRecheckTransactions\",\r\n    (params) => execJobRecheckTransactions(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('JobRecheck');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const useUpdateJobRecheck = () => {\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const updateJobRecheck = async (params: any): Promise<any> => {\r\n    let data = new FormData();\r\n\r\n    Object.keys(params).forEach((value) => {\r\n      data.append(value, params[value] || \"\");\r\n    });\r\n\r\n    return await httpClient.post(\"/update_job_recheck\", data);\r\n  };\r\n\r\n  return useMutation<any, any, any>(\r\n    \"UpdateJobRecheck\",\r\n    (params) => updateJobRecheck(params),\r\n    {\r\n      onSuccess: (response) => {\r\n\r\n        queryClient.invalidateQueries('JobRecheck');\r\n\r\n      },\r\n      onError: (error) => {\r\n\r\n        console.log(error?.response?.data?.message || error.message);\r\n\r\n      },\r\n    }\r\n  );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}